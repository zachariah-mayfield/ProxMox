# Define input parameters for this template
parameters:
  sshKeyFile: ''            # e.g. id_ed25519 - file (as secure file) from Azure DevOps --> Pipelines --> Library --> Secure Files
  testUser: ''              # e.g. 'ubuntu' - Change to your VM user if not 'ubuntu'
  ssh_private_key_path: ''  # e.g. id_ed25519 - this is the Private SSH Key file (as secure file) from Azure DevOps --> Pipelines --> Library --> Secure Files
  ssh_public_key_path: ''   # e.g. id_ed25519.pub - this is the Public SSH Key file (as secure file) from Azure DevOps --> Pipelines --> Library --> Secure Files

jobs:
  - job: SSH_Connectivity
    displayName: "🔐 SSH Connectivity Test"
    pool:
      name: Default
      demands:
        - agent.name -equals automation-9999
    
    steps:

      # ── Download PRIVATE key ──────────────────────────────────────────────────
      - task: DownloadSecureFile@1
        name: downloadPrivateKey
        inputs:
          secureFile: ${{ parameters.ssh_private_key_path }} # e.g. id_ed25519 - this is the Private SSH Key file (as secure file) from Azure DevOps --> Pipelines --> Library --> Secure Files

      # ── Download PUBLIC key (matching .pub) ───────────────────────────────────
      - task: DownloadSecureFile@1
        name: downloadPublicKey
        inputs:
          secureFile: ${{ parameters.ssh_public_key_path }}  # e.g. id_ed25519.pub - this is the Public SSH Key file (as secure file) from Azure DevOps --> Pipelines --> Library --> Secure Files 

      # ── Prepare keys & start ssh-agent ────────────────────────────────────────
      - script: |
          set -e

          echo "🔐 Showing private key snippet:"
          head -n 10 "$(downloadPrivateKey.secureFilePath)" || true

          ls -la ~/.ssh/"${{ parameters.ssh_private_key_path }}"
          ls -la ~/.ssh/"${{ parameters.ssh_public_key_path }}"

          echo "🔒 Copying keys and setting permissions..."
          cp "$(downloadPrivateKey.secureFilePath)" ~/.ssh/"${{ parameters.ssh_private_key_path }}"
          cp "$(downloadPublicKey.secureFilePath)" ~/.ssh/"${{ parameters.ssh_public_key_path }}"
          
          chmod 600 ~/.ssh/"${{ parameters.ssh_private_key_path }}"
          chmod 644 ~/.ssh/"${{ parameters.ssh_public_key_path }}"
          
          echo "🔑 Starting ssh-agent and adding key..."
          eval "$(ssh-agent -s)"
          ssh-add ~/.ssh/"${{ parameters.ssh_private_key_path }}"

          echo "🧪 Testing SSH connection to Proxmox..."
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/"${{ parameters.ssh_private_key_path }}" root@192.168.1.250 'echo ✅ SSH OK'
        displayName: "Setup SSH Keys and start ssh-agent"

      # ── Download Terraform outputs (vm_ips) ───────────────────────────────────
      - task: DownloadPipelineArtifact@2
        inputs:
          artifact: terraform_outputs
          path: $(Pipeline.Workspace)/terraform_outputs
        displayName: "Download Terraform Output Artifact"

      # ── Loop through IPs & test SSH ───────────────────────────────────────────
      # Extract IPs from JSON and SSH into each
      # Make sure jq is installed on the agent
      - script: |
          set -e
          echo "Parsing IPs and checking SSH access..."

          output_file="$(Pipeline.Workspace)/terraform_outputs/tf_output.json"
          vm_ips=$(jq -r '.vm_ips.value[] | .[]' "$output_file")
          
          for ip in $vm_ips; do
              echo "Testing SSH to $ip..."
              ssh-keygen -R "$ip" || true
              ssh -o StrictHostKeyChecking=no \
                  -i ~/.ssh/"${{ parameters.ssh_private_key_path }}" \
                  ${{ parameters.testUser }}@"$ip" 'echo ✅ SSH OK' \
              || echo "❌ Failed to SSH to $ip"
          done
        displayName: "Test SSH Access to All VMs"