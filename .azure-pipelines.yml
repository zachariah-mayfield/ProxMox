trigger:
  - main

pool:
  name: Default
  demands:
    - agent.name -equals automation-9999

variables:
  TF_ROOT: './Terraform/bpg_terraform-clone-vm'

stages:
  - stage: Terraform
    jobs:
      - job: terraform_plan_apply
        variables:
          - group: Private_Variables  # Only needed if you're using secret vars like `proxmox_api_token`

        steps:
          # --- Download tfvars file ---
          - task: DownloadSecureFile@1
            name: tfvarsFile
            inputs:
              secureFile: secrets.auto.tfvars

          - script: |
              echo "Moving tfvars file into Terraform folder..."
              mv "$(tfvarsFile.secureFilePath)" "$(TF_ROOT)/secrets.auto.tfvars"
            displayName: 'Move secrets.auto.tfvars to TF directory'

          # --- Download and Load Private SSH Key ---
          - task: DownloadSecureFile@1
            name: sshKeyFile
            inputs:
              secureFile: id_rsa_pem  # This is your uploaded **private** key

          - script: |
              echo "üîê Showing private key snippet:"
              head -n 10 "$(sshKeyFile.secureFilePath)"

              echo "üîí Setting permissions..."
              chmod 600 "$(sshKeyFile.secureFilePath)"

              echo "üîë Starting ssh-agent and adding key..."
              eval "$(ssh-agent -s)"
              ssh-add "$(sshKeyFile.secureFilePath)"

              echo "üß™ Testing SSH connection to Proxmox..."
              ssh -o StrictHostKeyChecking=no -i "$(sshKeyFile.secureFilePath)" root@192.168.1.250 "echo ‚úÖ SSH connection successful"
            displayName: 'Start ssh-agent and add SSH private key + Test SSH connection'

          # --- Terraform Init ---
          - script: |
              echo "üöÄ Running Terraform Init..."
              terraform -chdir=$(TF_ROOT) init
            displayName: 'Terraform Init'

          # --- Terraform Plan ---
          - script: |
              echo "üîç Running Terraform Plan..."
              terraform -chdir=$(TF_ROOT) plan \
                -var "ssh_private_key_path=$(sshKeyFile.secureFilePath)" \
                -var-file="secrets.auto.tfvars"
            displayName: 'Terraform Plan'

          # --- Terraform Apply ---
          - script: |
              echo "‚öôÔ∏è Applying Terraform Changes..."
              terraform -chdir=$(TF_ROOT) apply \
                -auto-approve -input=false \
                -var "ssh_private_key_path=$(sshKeyFile.secureFilePath)" \
                -var-file="secrets.auto.tfvars"
            displayName: 'Terraform Apply'

          # --- Tell Terraform to install and configure Python. --- 
          # A Microsoft-hosted runner uses this with UsePythonVersion@0 expects to find pre-installed versions of Python in a Microsoft tool cache.
          # - task: UsePythonVersion@0
          #   inputs:
          #     versionSpec: '3.x'
          #   displayName: 'Set up Python 3'

          # --- Requirememts ---
          - script: pip3 install -r requirements.txt
            displayName: 'Install Python test dependencies'

          # --- Tests - Test VM ---
          - script: |
              echo "üß™ Running Post-Deployment Tests..."

              # Install Python + pip if not installed
              which python3 || sudo apt update && sudo apt install -y python3 python3-pip

              # Install test dependencies
              pip3 install pytest paramiko

              # Run raw SSH test first
              ssh -o StrictHostKeyChecking=no -i "$(sshKeyFile.secureFilePath)" root@192.168.1.250 "echo ‚úÖ SSH connection successful"

              # Run pytest with the secure key file
              pytest Tests/test_ssh.py --ssh-key "$(sshKeyFile.secureFilePath)"
            displayName: 'TEST: Run SSH pytest with Secure File'
